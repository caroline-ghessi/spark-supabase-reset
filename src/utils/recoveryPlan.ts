import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export async function executeRecoveryPlan() {
  console.log('üöÄ Iniciando plano de recupera√ß√£o...');
  
  try {
    // 1. Primeiro executar health check
    console.log('üè• Executando health check...');
    const { data: healthData, error: healthError } = await supabase.functions.invoke('webhook-health-check');
    
    if (healthError) {
      console.error('‚ùå Erro no health check:', healthError);
      toast.error('Erro no health check');
      return false;
    }
    
    console.log('üè• Health check conclu√≠do:', healthData?.status);
    
    // 2. Se o health check passou, executar reprocessamento
    if (healthData?.status === 'healthy' || healthData?.status === 'warning') {
      console.log('üîÑ Executando reprocessamento de mensagens perdidas...');
      
      const { data: reprocessData, error: reprocessError } = await supabase.functions.invoke('reprocess-lost-messages');
      
      if (reprocessError) {
        console.error('‚ùå Erro no reprocessamento:', reprocessError);
        toast.error('Erro no reprocessamento');
        return false;
      }
      
      console.log('‚úÖ Reprocessamento conclu√≠do:', reprocessData);
      
      if (reprocessData?.summary?.successful > 0) {
        toast.success(`‚úÖ Plano de recupera√ß√£o conclu√≠do! ${reprocessData.summary.successful} mensagens reprocessadas`);
      } else {
        toast.info('‚ÑπÔ∏è Nenhuma mensagem precisou ser reprocessada');
      }
      
      return true;
    } else {
      console.warn('‚ö†Ô∏è Sistema ainda com problemas:', healthData?.issues);
      toast.warning('Sistema ainda apresenta problemas. Verifique a configura√ß√£o do Dify.');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no plano de recupera√ß√£o:', error);
    toast.error('Erro cr√≠tico no plano de recupera√ß√£o');
    return false;
  }
}

export async function testDifyConnection() {
  console.log('üß™ Testando conectividade com Dify...');
  
  try {
    const { data, error } = await supabase.functions.invoke('test-webhook-dify', {
      body: {
        test_message: 'Teste p√≥s-recupera√ß√£o do pagamento',
        timestamp: new Date().toISOString()
      }
    });
    
    if (error) {
      console.error('‚ùå Erro no teste Dify:', error);
      return false;
    }
    
    console.log('‚úÖ Teste Dify conclu√≠do:', data);
    return data?.status === 'test_completed';
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no teste Dify:', error);
    return false;
  }
}