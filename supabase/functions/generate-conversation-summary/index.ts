import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
)

const openAIApiKey = Deno.env.get('OPENAI_API_KEY')

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

console.log('üöÄ Generate Conversation Summary Function iniciada!')

serve(async (req) => {
  const requestId = crypto.randomUUID().substring(0, 8)
  console.log(`üîÑ [${requestId}] ${req.method} ${req.url}`)

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  if (req.method !== 'POST') {
    return new Response('Method not allowed', { status: 405, headers: corsHeaders })
  }

  try {
    const { conversation_id } = await req.json()

    if (!conversation_id) {
      throw new Error('Par√¢metro obrigat√≥rio: conversation_id')
    }

    // Buscar conversa
    const { data: conversation, error: convErr } = await supabase
      .from('conversations')
      .select('*')
      .eq('id', conversation_id)
      .single()

    if (convErr || !conversation) {
      throw new Error('Conversa n√£o encontrada')
    }

    console.log(`üîÑ [${requestId}] Gerando resumo para conversa ${conversation_id}`)

    // Buscar hist√≥rico completo de mensagens da conversa
    const { data: messages, error: messagesErr } = await supabase
      .from('messages')
      .select('*')
      .eq('conversation_id', conversation_id)
      .order('created_at', { ascending: true })

    if (messagesErr) {
      console.log(`‚ö†Ô∏è [${requestId}] Erro ao buscar mensagens:`, messagesErr)
      return new Response(JSON.stringify({ 
        summary: `**Cliente:** ${conversation.client_name || conversation.client_phone}\n**Temperatura:** ${conversation.lead_temperature}\n\n_Resumo b√°sico - n√£o foi poss√≠vel acessar hist√≥rico de mensagens._`
      }), { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      })
    }

    // Gerar resumo com IA se OpenAI est√° configurado e h√° mensagens
    let aiSummary = ''
    if (openAIApiKey && messages && messages.length > 0) {
      try {
        console.log(`ü§ñ [${requestId}] Gerando resumo da conversa com IA...`)
        
        const conversationHistory = messages.map(msg => 
          `[${msg.sender_type}] ${msg.sender_name}: ${msg.content}`
        ).join('\n')

        const summaryPrompt = `Voc√™ √© um especialista em qualifica√ß√£o de leads e vendas. Analise esta conversa e extraia TODAS as informa√ß√µes comerciais relevantes para o vendedor assumir o atendimento de forma eficaz.

DADOS DO CLIENTE:
- Nome: ${conversation.client_name || 'N√£o informado'}
- Telefone: ${conversation.client_phone}
- Temperatura: ${conversation.lead_temperature}
- Valor Potencial: R$ ${conversation.potential_value || 'N√£o informado'}
- Fonte: ${conversation.source || 'WhatsApp'}

HIST√ìRICO COMPLETO DA CONVERSA:
${conversationHistory}

INSTRU√á√ÉO CR√çTICA: Analise cada mensagem em busca de informa√ß√µes comerciais espec√≠ficas. Gere um resumo DETALHADO e ESTRUTURADO com:

üéØ **PRODUTO/INTERESSE**:
- Qual produto espec√≠fico o cliente quer? (energia solar, inversor, pain√©is, etc.)
- Que capacidade/pot√™ncia mencionou? (kWp, kW, etc.)
- Qual a aplica√ß√£o? (residencial, comercial, industrial, rural)
- Mencionou marca ou especifica√ß√£o t√©cnica?

üìç **LOCALIZA√á√ÉO E CONTEXTO**:
- Qual cidade/regi√£o o cliente informou?
- Tipo de im√≥vel (casa, empresa, fazenda, etc.)
- Caracter√≠sticas do local mencionadas
- Dist√¢ncia da distribuidora/rede el√©trica

üí∞ **INVESTIMENTO E URG√äNCIA**:
- Cliente mencionou or√ßamento dispon√≠vel?
- Falou sobre prazo de pagamento preferido?
- Demonstrou urg√™ncia? Por qu√™?
- Mencionou financiamento ou forma de pagamento?

üîç **SITUA√á√ÉO ATUAL (SPIN)**:
- **Situa√ß√£o**: Como est√° hoje? (conta de luz alta, sem energia, etc.)
- **Problema**: Que dificuldades relatou?
- **Implica√ß√£o**: Como isso afeta o cliente?
- **Necessidade**: O que exatamente precisa resolver?

‚ö° **CONTEXTO T√âCNICO**:
- Consumo mencionado (kWh/m√™s, valor da conta)?
- Caracter√≠sticas da instala√ß√£o atual
- Limita√ß√µes ou desafios t√©cnicos mencionados
- Experi√™ncia pr√©via com energia solar

üéØ **OPORTUNIDADE DE VENDA**:
- Cliente est√° comparando propostas?
- Qual o principal motivador da compra?
- Sinais de interesse forte ou obje√ß√µes
- Pr√≥ximos passos ideais para fechamento

üìã **INFORMA√á√ïES CR√çTICAS**:
- Decisor da compra identificado?
- Prazo para decis√£o mencionado?
- Documenta√ß√£o necess√°ria discutida?
- Qualquer informa√ß√£o sens√≠vel ou importante

FORMATO: Use t√≥picos claros e diretos. Se alguma informa√ß√£o N√ÉO foi mencionada, escreva "N√£o informado" - mas procure TODAS as pistas no hist√≥rico.`

        const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
              { role: 'system', content: 'Voc√™ √© um especialista em vendas e atendimento ao cliente.' },
              { role: 'user', content: summaryPrompt }
            ],
            max_tokens: 2000,
            temperature: 0.7
          })
        })

        if (aiResponse.ok) {
          const aiData = await aiResponse.json()
          aiSummary = aiData.choices[0].message.content
          console.log(`‚úÖ [${requestId}] Resumo IA gerado com sucesso`)
        } else {
          console.log(`‚ö†Ô∏è [${requestId}] Falha ao gerar resumo IA:`, await aiResponse.text())
          aiSummary = `**Cliente:** ${conversation.client_name || conversation.client_phone}\n**Temperatura:** ${conversation.lead_temperature}\n\n_Falha ao gerar resumo detalhado._`
        }
      } catch (aiError) {
        console.log(`‚ö†Ô∏è [${requestId}] Erro na gera√ß√£o do resumo IA:`, aiError)
        aiSummary = `**Cliente:** ${conversation.client_name || conversation.client_phone}\n**Temperatura:** ${conversation.lead_temperature}\n\n_Erro ao gerar resumo detalhado._`
      }
    } else {
      // Resumo b√°sico se n√£o h√° IA configurada
      aiSummary = `**Cliente:** ${conversation.client_name || conversation.client_phone}\n**Telefone:** ${conversation.client_phone}\n**Temperatura:** ${conversation.lead_temperature}\n**Valor Potencial:** R$ ${conversation.potential_value || 'N√£o informado'}\n\n_Resumo b√°sico - IA n√£o configurada._`
    }

    console.log(`‚úÖ [${requestId}] Resumo gerado com sucesso`)

    return new Response(JSON.stringify({
      success: true,
      summary: aiSummary,
      conversation: {
        id: conversation.id,
        client_name: conversation.client_name,
        client_phone: conversation.client_phone,
        lead_temperature: conversation.lead_temperature,
        potential_value: conversation.potential_value
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error(`‚ùå [${requestId}] Erro:`, error)
    return new Response(JSON.stringify({ 
      error: error.message,
      summary: '_Erro ao gerar resumo da conversa._'
    }), { 
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})